function Read-SettingsFile {
    param (
        $SettingsFile
    )
    
   # $SettingsFile = "C:\Users\Matt\OneDrive\Documents\DiskPartitioner\Settings\Test.e68"

   $ReadSettings = get-content -Path $SettingsFile

    if (((($ReadSettings[0] -split ":")[0]).Trim() -ne 'Version') -or ($ReadSettings[1] -ne 'Do not edit this file! It will break Emu68 Imager! You have been warned!')) {
        Write-InformationMessage -Message "Invalid Settings File!"
        return $false #Invalid File
    }

    $VersionCheck = (($ReadSettings[0] -split ":")[-1]).Trim()

    if ($Script:Settings.Version -lt [System.version]$VersionCheck){
        Write-InformationMessage -Message "Settings File is for different version of Emu68 Imager!"
        return $false #File is for wrong version
    }

    $LoadedSettingsHeader = $null
    $GPTMBRHeader = $null
    $RDBHeader = $null
    $MBRPartitionHeader = $null
    $RDBPartitionHeader = $null
    $AvailablePackagesHeader = $null 
    $FoundInstallMediaHeader = $null
    $FoundKickstarttoUseHeader = $null

    $LoadedSettings = @()
    $GPTMBR = @()
    $RDB = @()
    $MBRPartitions = @()
    $RDBPartitions = @()
    $ImportFiles = @()
    $AvailableIconSets = New-Object System.Data.DataTable
    $AvailablePackages = New-Object System.Data.DataTable
    $FoundInstallMedia = @()
    $FoundKickstarttoUse = @()

    $ReadSettings | ForEach-Object {
        if ($_.split(';')[0] -eq 'SettingHeader'){
            $HeaderValue = $_.Replace('SettingHeader;','')
            $LoadedSettingsHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'GPTMBRHeader'){
            $HeaderValue = $_.Replace('GPTMBRHeader;','')
            $GPTMBRHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'RDBHeader'){
            $HeaderValue = $_.Replace('RDBHeader;','')
            $RDBHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'MBRPartitionHeader'){
            $HeaderValue = $_.Replace('MBRPartitionHeader;','')
            $MBRPartitionHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'RDBPartitionHeader'){
            $HeaderValue = $_.Replace('RDBPartitionHeader;','')
            $RDBPartitionHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'AvailableIconSetsUserSelectedHeader'){
            $HeaderValue = $_.Replace('AvailableIconSetsUserSelectedHeader;','')
            $AvailableIconSetsHeader = $HeaderValue.Split(';')
        }        
        elseif ($_.split(';')[0] -eq 'AvailablePackagesUserSelectedHeader'){
            $HeaderValue = $_.Replace('AvailablePackagesUserSelectedHeader;','')
            $AvailablePackagesHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'FoundInstallMediatoUseHeader'){
            $HeaderValue = $_.Replace('FoundInstallMediatoUseHeader;','')
            $FoundInstallMediaHeader = $HeaderValue.Split(';')
        }
        elseif ($_.split(';')[0] -eq 'FoundKickstarttoUseHeader'){
            $HeaderValue = $_.Replace('FoundKickstarttoUseHeader;','')
            $FoundKickstarttoUseHeader = $HeaderValue.Split(';')
        }
    }

    $ReadSettings | ForEach-Object {
        if ($_.split(';')[0] -eq 'Setting'){
            $LoadedSettings += ConvertFrom-Csv -InputObject $_ -Delimiter ';' -Header $LoadedSettingsHeader 
        }
        elseif ($_.split(';')[0] -eq 'GPTMBRDetails'){
            $GPTMBR += ConvertFrom-Csv -InputObject $_ -Delimiter ';' -Header $GPTMBRHeader
        }
        elseif ($_.split(';')[0] -eq 'RDBDetails'){
            $RDB += ConvertFrom-Csv -InputObject $_ -Delimiter ';' -Header $RDBHeader
        }
        elseif ($_.split(';')[0] -eq 'MBRPartitionDetails'){
            $MBRPartitions += ConvertFrom-Csv -InputObject $_ -Delimiter ';' -Header $MBRPartitionHeader
        }
        elseif ($_.split(';')[0] -eq 'RDBPartitionDetails'){
            $RDBPartitions += ConvertFrom-Csv -InputObject $_ -Delimiter ';' -Header $RDBPartitionHeader
        }
        elseif ($_.split(';')[0] -eq 'AvailableIconSetsUserSelectedDetails'){
            $AvailableIconSets += ConvertFrom-Csv -InputObject $_.Replace('AvailableIconSetsUserSelectedDetails;','')   -Delimiter ';' -Header $AvailableIconSetsHeader 
        }
        elseif ($_.split(';')[0] -eq 'AvailablePackagesUserSelectedDetails'){
            $AvailablePackages += ConvertFrom-Csv -InputObject $_.Replace('AvailablePackagesUserSelectedDetails;','')   -Delimiter ';' -Header $AvailablePackagesHeader 
        }
        elseif ($_.split(';')[0] -eq 'FoundInstallMediatoUseDetails'){
            $FoundInstallMedia += ConvertFrom-Csv -InputObject $_.Replace('FoundInstallMediatoUseDetails;','')  -Delimiter ';' -Header $FoundInstallMediaHeader
        }
        elseif ($_.split(';')[0] -eq 'FoundKickstarttoUseDetails'){
            $FoundKickstarttoUse += ConvertFrom-Csv -InputObject $_.replace('FoundKickstarttoUseDetails;','')  -Delimiter ';' -Header $FoundKickstarttoUseHeader
        }
    }

   # $ImportFilesHeader = ('Type','Partition','FullPath','Size','CreationTime','Source','PathHeader')
   
   # Remove existing Partitions 

   $Script:GUICurrentStatus.ProcessImageStatus = $false

    Remove-Variable -Scope Script -Name 'WPF_DP_Partition*'
    
    if (test-path variable:script:WPF_DP_Disk_GPTMBR) {
        Remove-Variable -Scope Script -Name 'WPF_DP_Disk_GPTMBR'
    }

    $GPTMBR | ForEach-Object {
        $_.DiskSizeBytes = [decimal]$_.DiskSizeBytes
        $_.MBROverheadBytes = [decimal]$_.MBROverheadBytes
    }


    $MBRPartitions | ForEach-Object {
        $_.StartingPositionBytes  = [decimal]$_.StartingPositionBytes  
        $_.PartitionSizeBytes = [decimal]$_.PartitionSizeBytes
        $_.ImportedFilesSpaceBytes = [decimal]$_.ImportedFilesSpaceBytes
    }

    $RDBPartitions | ForEach-Object {
        $_.StartingPositionBytes  = [decimal]$_.StartingPositionBytes  
        $_.PartitionSizeBytes = [decimal]$_.PartitionSizeBytes
        $_.ImportedFilesSpaceBytes = [decimal]$_.ImportedFilesSpaceBytes
    }

    $Script:GUIActions.AvailableKickstarts = $null
    $Script:GUIActions.FoundInstallMediatoUse = $null
    $Script:GUIActions.FoundKickstarttoUse = $null
    $Script:GUIActions.ListofRemovableMedia = $null

    $LoadedSettings | ForEach-Object {
        if ($_.Setting -eq 'DiskTypeSelected'){
            $DiskTypetouse = $_.Value       
        }        
        else {
            (Get-Variable -Scope Script -Name "GUIActions").Value.$($_.Setting) = $_.Value
        }
    }  
   
    if (Test-Path $FoundKickstarttoUse.KickstartPath){
        if ((get-filehash -path $FoundKickstarttoUse.KickstartPath -Algorithm MD5).hash -eq (Get-InputCSVs -ROMHashes | Where-Object {$_.Kickstart_version -eq $Script:GUIActions.KickstartVersiontoUse}).hash){
            $Script:GUIActions.FoundKickstarttoUse = $FoundKickstarttoUse | Select-Object 'Kickstart_Version','FriendlyName','Sequence','IncludeorExclude','ExcludeMessage','Fat32Name','KickstartPath'            
        }
    }

    $MissingFiles = $false

    $HashTableforInstallMedia = @{} # Clear Hash
    Get-InputCSVs -InstallMediaHashes | ForEach-Object {
        $HashTableforInstallMedia[$_.Hash] = $null
    }

    $FoundInstallMedia | ForEach-Object {
        If (Test-Path $_.Path){
            $HashtoCheck = (Get-FileHash -path $_.path -Algorithm MD5).hash
            if (-not ($HashTableforInstallMedia.ContainsKey($HashtoCheck))){
                $MissingFiles = $true  
                break              
            }
        }
        else {
            $MissingFiles = $true
        } 
    }

    if ($MissingFiles -eq $false){
        $Script:GUIActions.FoundInstallMediatoUse = $FoundInstallMedia 
    }


    $Script:GUIActions.AvailablePackages.Clear()
    
    foreach ($line in $AvailablePackages ){
        $Array = @()
        $array += $line.PackageNameUserSelected
        $array += $line.PackageNameDefaultInstall
        $array += $line.PackageNameFriendlyName
        $array += $line.PackageNameGroup
        $array += $line.PackageNameDescription
        [void]$Script:GUIActions.AvailablePackages.Rows.Add($array)
    }
    
    $Script:GUIActions.AvailableIconSets.Clear() 
     
    foreach ($line in  $AvailableIconSets){
       $Array = @()
       $array += $line.IconSet
       $array += $line.IconSetDescription
       $array += $line.IconSetDefaultInstall
      # $array += $line.IconSetUserSelected
       [void]$Script:GUIActions.AvailableIconSets.Rows.Add($array)
    }

    
    $Script:GUICurrentStatus.AvailablePackagesNeedingGeneration = $false

    $WPF_Setup_ScreenMode_Dropdown.SelectedItem = $Script:GUIActions.ScreenModetoUseFriendlyName
    $WPF_Setup_KickstartVersion_Dropdown.SelectedItem = $Script:GUIActions.KickstartVersiontoUseFriendlyName
    $WPF_Setup_Password_Textbox.Text = $Script:GUIActions.Password
    $WPF_Setup_SSID_Textbox.Text = $Script:GUIActions.SSID
    
    Set-InitialDiskValues -DiskType $DiskTypetouse -SizeBytes $GPTMBR.DiskSizeBytes -LoadSettings

    $WPF_DP_Disk_GPTMBR.NumberofPartitionsMBR = $GPTMBR.NumberofPartitionsMBR
    $WPF_DP_Disk_GPTMBR.NextPartitionMBRNumber = $GPTMBR.NextPartitionMBRNumber
   
    $MBRPartitions | ForEach-Object {
        if ($_.PartitionType -eq 'MBR' -and $_.PartitionSubType -eq 'FAT32'){
            if ($_.DefaultGPTMBRPartition -eq 'True'){
                Add-GUIPartitiontoGPTMBRDisk -LoadSettings -PartitionType $_.PartitionType -PartitionSubType $_.PartitionSubType -NewPartitionNameFromSettings $_.Name -AddType 'SpecificPosition' -DefaultPartition $true -SizeBytes ($($_.PartitionSizeBytes)) -VolumeName $_.VolumeName -StartingPositionBytes ($($_.StartingPositionBytes))                             
            }
            elseif ($_.ImportedPartition -eq 'True') { 
                Add-GUIPartitiontoGPTMBRDisk -LoadSettings -PartitionType $_.PartitionType -PartitionSubType $_.PartitionSubType -NewPartitionNameFromSettings $_.Name -AddType 'SpecificPosition' -PathtoImportedPartition $_.ImportedPartitionPath -ImportedPartition $true -ImportedPartitionMethod $_.ImportedPartitionMethod -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes)) -VolumeName $_.VolumeName
            }
            else {
                Add-GUIPartitiontoGPTMBRDisk -LoadSettings -PartitionType $_.PartitionType -PartitionSubType $_.PartitionSubType -NewPartitionNameFromSettings $_.Name -AddType 'SpecificPosition' -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes)) -VolumeName $_.VolumeName
            } 
        }
        elseif ($_.PartitionType -eq 'MBR' -and $_.PartitionSubType -eq 'ID76'){
            if ($_.DefaultGPTMBRPartition -eq 'True'){
                Add-GUIPartitiontoGPTMBRDisk -LoadSettings -PartitionType $_.PartitionType -PartitionSubType $_.PartitionSubType -NewPartitionNameFromSettings $_.Name -AddType 'SpecificPosition' -DefaultPartition $true -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes)) 
                Add-AmigaDisktoID76Partition -ID76PartitionName $_.Name
            }
            elseif ($_.ImportedPartition -eq 'True') {
                Add-GUIPartitiontoGPTMBRDisk -LoadSettings -PartitionType $_.PartitionType -PartitionSubType $_.PartitionSubType -NewPartitionNameFromSettings $_.Name -AddType 'SpecificPosition' -PathtoImportedPartition $_.ImportedPartitionPath -ImportedPartition $true -ImportedPartitionMethod $_.ImportedPartitionMethod -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes))
                Add-AmigaDisktoID76Partition -ID76PartitionName $_.Name
            }
            else {
                Add-GUIPartitiontoGPTMBRDisk -LoadSettings -PartitionType $_.PartitionType -PartitionSubType $_.PartitionSubType -NewPartitionNameFromSettings $_.Name -AddType 'SpecificPosition' -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes))
                Add-AmigaDisktoID76Partition -ID76PartitionName $_.Name -ImportedDisk
            }

            foreach ($AmigaDisk in $RDB) {
                if ($Disk.AmigaDisk -eq "$($_.Name)_AmigaDisk"){
                    (Get-Variable -name "$($_.Name)_AmigaDisk").Value.NextPartitionNumber = $Disk.NextPartitionNumber
                    (Get-Variable -name "$($_.Name)_AmigaDisk").Value.ID76PartitionParent = $Disk.ID76PartitionParent
                    (Get-Variable -name "$($_.Name)_AmigaDisk").Value.NumberofPartitionsTotal = $Disk.NumberofPartitionsTotal
                    break
                }
            } 
        }
        
    }  
  
    $RDBPartitions | ForEach-Object {
        $AmigaDiskName = ($_.Name.Substring(0,($_.Name.IndexOf('_AmigaDisk_')+10)))
        if ($_.DefaultAmigaWorkbenchPartition -eq 'True'){
            Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Name -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -PartitionTypeAmiga 'Workbench' -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.DosType -MaxTransfer $_.MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority -Mask $_.Mask           

        }
        elseif ($_.DefaultAmigaWorkPartition -eq 'True'){
            Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Name -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -PartitionTypeAmiga 'Work' -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.DosType -MaxTransfer $_.MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority -Mask $_.Mask   
        }
        elseif ($_.ImportedPartition -eq 'True'){
            Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Name -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -ImportedPartition $true -ImportedPartitionMethod $_.ImportedPartitionMethod -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.DosType -MaxTransfer $_.MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority -Mask $_.Mask   
        }
        else {
            Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Name -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.DosType -MaxTransfer $_.MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority -Mask $_.Mask   
        } 

    }            

    Update-UI -MainWindowButtons -Emu68Settings -DiskPartitionWindow -UpdateInputBoxes -Buttons -PhysicalvsImage -CheckforRunningImage -freespacealert

    return $true

}
