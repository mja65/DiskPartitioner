function Get-SettingsDataforSave {
    param (
       
    )

    if (($Script:GUIActions.KickstartVersiontoUse) -and  $Script:GUICurrentStatus.AvailablePackagesNeedingGeneration -eq $true){
        Get-SelectablePackages
        $Script:GUICurrentStatus.AvailablePackagesNeedingGeneration = $false
    }

    $Output = @()
    $Output += "Version: $([string]$Script:Settings.Version)"
    $Output += 'Do not edit this file! It will break Emu68 Imager! You have been warned!'
    #Emu68 Settings
    $Output += "SettingHeader;Type;Setting;Value"
    $Output += "Setting;InstallType;$($Script:GUIActions.InstallType)"
    $Output += "Setting;ScreenModetoUse;$($Script:GUIActions.ScreenModetoUse)"
    $Output += "Setting;ScreenModetoUseFriendlyName;$($Script:GUIActions.ScreenModetoUseFriendlyName)"
    $Output += "Setting;KickstartVersiontoUse;$($Script:GUIActions.KickstartVersiontoUse)"
    $Output += "Setting;KickstartVersiontoUseFriendlyName;$($Script:GUIActions.KickstartVersiontoUseFriendlyName)" 
    $Output += "Setting;OSInstallMediaType;$($Script:GUIActions.OSInstallMediaType)" 
    $Output += "Setting;SSID;$($Script:GUIActions.SSID)"
    $Output += "Setting;WifiPassword;$($Script:GUIActions.WifiPassword)"
    $Output += "Setting;DiskTypeSelected;$($Script:GUIActions.DiskTypeSelected)"
    $Output += "Setting;OutputPath;$($Script:GUIActions.OutputPath)"
    $Output += "Setting;OutputType;$($Script:GUIActions.OutputType)"
    $Output += "Setting;InstallMediaLocation;$($Script:GUIActions.InstallMediaLocation)"
    $Output += "Setting;ROMLocation;$($Script:GUIActions.ROMLocation)"
    $Output += "Setting;SelectedIconSet;$($Script:GUIActions.SelectedIconSet)"
    $Output += "Setting;InstallOSFiles;$($Script:GUIActions.InstallOSFiles)"

    $Output += "GPTMBR Disk Details:"
    $Output += "GPTMBRHeader;Type;GPTMBRDisk;DiskType;DiskSizeBytes;MBROverheadBytes;NumberofPartitionsMBR;NextPartitionMBRNumber"
    if ($WPF_DP_Disk_GPTMBR){
        $Output += "GPTMBRDetails;WPF_DP_Disk_GPTMBR;$($WPF_DP_Disk_GPTMBR.DiskType);$($WPF_DP_Disk_GPTMBR.DiskSizeBytes);$($WPF_DP_Disk_GPTMBR.MBROverheadBytes);$($WPF_DP_Disk_GPTMBR.NumberofPartitionsMBR);$($WPF_DP_Disk_GPTMBR.NextPartitionMBRNumber)"
    }
    else {
        $Output += "GPTMBRDetails;NOTAVAILABLE"
    }

    $Output += "Amiga Disk Details:"
    $Output += "RDBHeader;Type;Name;DiskType;DiskSizeBytes;CanAddPartition;RDBOverheadBytes;NextPartitionNumber;ID76PartitionParent"
    $AmigaDisks = Get-Variable -name '*_AmigaDisk'
    if ($AmigaDisks){
        $AmigaDisks | ForEach-Object{
            $Output += "RDBDetails;$($_.PartitionName);$($_.Partition.DiskType);$($_.Partition.DiskSizeBytes);$($_.Partition.CanAddPartition);$($_.Partition.RDBOverheadBytes);$($_.Partition.NextPartitionNumber);$($_.Partition.ID76PartitionParent)"
        }
    }
    else {
        $Output += "RDBDetails;NOTAVAILABLE"
    }
  
    $Output += "MBR Partition Details:"
    $Output += "MBRPartitionHeader;Type;ImportedPartitionMethod;ImportedPartition;ImportedFilesSpaceBytes;VolumeName;StartingPositionBytes;PartitionSizeBytes;PartitionType;DefaultGPTMBRPartition;PartitionSubType;PartitionTypeGPTMBRorAmiga;ImportedPartitionPath;ImportedGPTMBRPartitionNumber;Name;ImportedFilesPath "
    $MBRPartitions = $Script:GUICurrentStatus.GPTMBRPartitionsandBoundaries
    if ($MBRPartitions){
        $MBRPartitions | ForEach-Object {
           $Output += "MBRPartitionDetails;$($_.Partition.ImportedPartitionMethod);$($_.Partition.ImportedPartition);$($_.Partition.ImportedFilesSpaceBytes);$($_.Partition.VolumeName);$($_.Partition.StartingPositionBytes);$($_.Partition.PartitionSizeBytes);$($_.Partition.PartitionType);$($_.Partition.DefaultGPTMBRPartition);$($_.Partition.PartitionSubType);$($_.Partition.PartitionTypeGPTMBRorAmiga);$($_.Partition.ImportedPartitionPath);$($_.Partition.ImportedGPTMBRPartitionNumber);$($_.Partition.Name);$($_.Partition.ImportedFilesPath)"           
        }
    }
    else {
        $Output += "MBRPartitionDetails;NOTAVAILABLE"
    }

    $Output += "RDB Partition Details:"
    $Output += "RDBPartitionHeader;Type;Name;ImportedPartitionMethod;ImportedPartition;ImportedFilesSpaceBytes;StartingPositionBytes;PartitionSizeBytes;PartitionType;ImportedFilesPath;DefaultAmigaWorkbenchPartition;PartitionTypeGPTMBRorAmiga;DefaultAmigaWorkPartition;ImportedPartitionPath;VolumeName;VolumeNameOriginalImportedValue;Bootable;BootableOriginalImportedValue;DosType;DosTypeOriginalImportedValue;NoMount;NoMountOriginalImportedValue;Priority;PriorityOriginalImportedValue;MaxTransfer;MaxTransferOriginalImportedValue;DeviceName;DeviceNameOriginalImportedValue;Buffers;BuffersOriginalImportedValue;Mask;MaskOriginalValue"    
    $RDBPartitions = $Script:GUICurrentStatus.AmigaPartitionsandBoundaries
    if ($RDBPartitions){
        $RDBPartitions | ForEach-Object {
           $Output += "RDBPartitionDetails;$($_.PartitionName);$($_.Partition.ImportedPartitionMethod);$($_.Partition.ImportedPartition);$($_.Partition.ImportedFilesSpaceBytes);$($_.Partition.StartingPositionBytes);$($_.Partition.PartitionSizeBytes);$($_.Partition.PartitionType);$($_.Partition.ImportedFilesPath);$($_.Partition.DefaultAmigaWorkbenchPartition);$($_.Partition.PartitionTypeGPTMBRorAmiga);$($_.Partition.DefaultAmigaWorkPartition);$($_.Partition.ImportedPartitionPath);$($_.Partition.VolumeName);$($_.Partition.VolumeNameOriginalImportedValue);$($_.Partition.Bootable);$($_.Partition.BootableOriginalImportedValue);$($_.Partition.DosType);$($_.Partition.DosTypeOriginalImportedValue);$($_.Partition.NoMount);$($_.Partition.NoMountOriginalImportedValue);$($_.Partition.Priority);$($_.Partition.PriorityOriginalImportedValue);$($_.Partition.MaxTransfer);$($_.Partition.MaxTransferOriginalImportedValue);$($_.Partition.DeviceName);$($_.Partition.DeviceNameOriginalImportedValue);$($_.Partition.Buffers);$($_.Partition.BuffersOriginalImportedValue);$($_.Partition.Mask);$($_.Partition.MaskOriginalImportedValue)"
               
        }
    }
    else {
        $Output += "RDBPartitionDetails;NOTAVAILABLE"
    } 
    
    $AvailableIconsetsUserSelectedOutput = @()
    $HeaderRow = "AvailableIconSetsUserSelectedHeader"

    If ($Script:GUIActions.AvailableiconSets.Rows.Count -ne 0){
        $Fields = ($Script:GUIActions.AvailableiconSets | Get-Member -MemberType Property).Name 
           
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
       
        $AvailableIconsetsUserSelectedOutput  += $HeaderRow 
        
        $Script:GUIActions.AvailableiconSets | ForEach-Object {
            $DetailRow = "AvailableIconSetsUserSelectedDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            $AvailableIconsetsUserSelectedOutput += $DetailRow 
        }
        
        
    }
    else {
        $DetailRow = "AvailableIconSetsUserSelectedDetails;NOTAVAILABLE"
      #  $AvailablePackagesUserSelectedOutput += $HeaderRow 
      $AvailableIconsetsUserSelectedOutput += $DetailRow 
        
    }
    
    $Output += "AvailableIconSetsUserSelected:"
    $Output += $AvailableIconsetsUserSelectedOutput

    $AvailablePackagesUserSelectedOutput = @()
    $HeaderRow = "AvailablePackagesUserSelectedHeader"
    
    If ($Script:GUIActions.AvailablePackages.Rows.Count -ne 0){
        $Fields = ($Script:GUIActions.AvailablePackages | Get-Member -MemberType Property).Name 
           
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
       
        $AvailablePackagesUserSelectedOutput += $HeaderRow 
        
        $Script:GUIActions.AvailablePackages | ForEach-Object {
            $DetailRow = "AvailablePackagesUserSelectedDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            $AvailablePackagesUserSelectedOutput += $DetailRow 
        }
        
        
    }
    else {
        $DetailRow = "AvailablePackagesUserSelectedDetails;NOTAVAILABLE"
      #  $AvailablePackagesUserSelectedOutput += $HeaderRow 
        $AvailablePackagesUserSelectedOutput += $DetailRow 
        
    }
    
    $Output += "AvailablePackagesUserSelected:"
    $Output += $AvailablePackagesUserSelectedOutput


    $FoundInstallMediatoUseOutput = @()

    $HeaderRow = "FoundInstallMediatoUseHeader"

    if ($Script:GUIActions.FoundInstallMediatoUse) {

        $Fields = ($Script:GUIActions.FoundInstallMediatoUse | Get-Member -MemberType NoteProperty).Name
           
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
        
        $FoundInstallMediatoUseOutput += $HeaderRow 
        
        $Script:GUIActions.FoundInstallMediatoUse | ForEach-Object {
            $DetailRow = "FoundInstallMediatoUseDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            
            $FoundInstallMediatoUseOutput += $DetailRow 
        
        }


    }
    else {
        $DetailRow = "FoundInstallMediatoUseDetails;NOTAVAILABLE"
        #$FoundInstallMediatoUseOutput += $HeaderRow 
        $FoundInstallMediatoUseOutput += $DetailRow
    }

    $Output += "Found InstallMedia:"
    $Output += $FoundInstallMediatoUseOutput 

    $FoundKickstarttoUseOutput = @()

    $HeaderRow = "FoundKickstarttoUseHeader"

    if ($Script:GUIActions.FoundKickstarttoUse) {
        $Fields = ($Script:GUIActions.FoundKickstarttoUse | Get-Member -MemberType NoteProperty).Name
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
        
        $FoundKickstarttoUseOutput += $HeaderRow

        $Script:GUIActions.FoundKickstarttoUse | ForEach-Object {
            $DetailRow = "FoundKickstarttoUseDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            
            $FoundKickstarttoUseOutput += $DetailRow 
    
        }

    }
    else {
        $DetailRow = "FoundKickstarttoUseDetails;NOTAVAILABLE"
        #$FoundKickstarttoUseOutput += $HeaderRow
        $FoundKickstarttoUseOutput += $DetailRow 
    }
    
    $Output += "Found Kickstart:"
    $Output += $FoundKickstarttoUseOutput

    return $Output

}