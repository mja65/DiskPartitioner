function Get-SettingsDataforSave {
    param (
       
    )

    if (($Script:GUIActions.KickstartVersiontoUse) -and   ($Script:GUIActions.AvailablePackages.Rows.Count -eq 0)){
        Get-SelectablePackage
    }

    $Output = @()
    $Output += "Version: $([string]$Script:Settings.Version)"
    $Output += 'Do not edit this file! It will break Emu68 Imager! You have been warned!'
    #Emu68 Settings
    $Output += "SettingHeader;Type;Setting;Value"
    $Output += "Setting;InstallType;$($Script:GUIActions.InstallType)"
    $Output += "Setting;ScreenModetoUse;$($Script:GUIActions.ScreenModetoUse)"
    $Output += "Setting;ScreenModetoUseFriendlyName;$($Script:GUIActions.ScreenModetoUseFriendlyName)"
    $Output += "Setting;KickstartVersiontoUse;$($Script:GUIActions.KickstartVersiontoUse)"
    $Output += "Setting;KickstartVersiontoUseFriendlyName;$($Script:GUIActions.KickstartVersiontoUseFriendlyName)" 
    $Output += "Setting;OSInstallMediaType;$($Script:GUIActions.OSInstallMediaType)" 
    $Output += "Setting;UseGlowIcons;$($Script:GUIActions.UseGlowIcons)"
    $Output += "Setting;SSID;$($Script:GUIActions.SSID)"
    $Output += "Setting;WifiPassword;$($Script:GUIActions.WifiPassword)"
    $Output += "Setting;DiskTypeSelected;$($Script:GUIActions.DiskTypeSelected)"
    $Output += "Setting;OutputPath;$($Script:GUIActions.OutputPath)"
    $Output += "Setting;OutputType;$($Script:GUIActions.OutputType)"
    $Output += "Setting;InstallMediaLocation;$($Script:GUIActions.InstallMediaLocation)"
    $Output += "Setting;ROMLocation;$($Script:GUIActions.ROMLocation)"

    $Output += "GPTMBR Disk Details:"
    $Output += "GPTMBRHeader;Type;GPTMBRDisk;DiskType;DiskSizeBytes;MBROverheadBytes;NumberofPartitionsMBR;NextPartitionMBRNumber"
    if ($WPF_DP_Disk_GPTMBR){
        $Output += "GPTMBRDetails;WPF_DP_Disk_GPTMBR;$($WPF_DP_Disk_GPTMBR.DiskType);$($WPF_DP_Disk_GPTMBR.DiskSizeBytes);$($WPF_DP_Disk_GPTMBR.MBROverheadBytes);$($WPF_DP_Disk_GPTMBR.NumberofPartitionsMBR);$($WPF_DP_Disk_GPTMBR.NextPartitionMBRNumber)"
    }
    else {
        $Output += "GPTMBRDetails;NOTAVAILABLE"
    }

    $Output += "Amiga Disk Details:"
    $Output += "RDBHeader;Type;Name;DiskType;DiskSizeBytes;CanAddPartition;RDBOverheadBytes;NextPartitionNumber;ID76PartitionParent"
    $AmigaDisks = Get-Variable -name '*_AmigaDisk'
    if ($AmigaDisks){
        $AmigaDisks | ForEach-Object{
            $Output += "RDBDetails;$($_.Name);$($_.Value.DiskType);$($_.Value.DiskSizeBytes);$($_.Value.CanAddPartition);$($_.Value.RDBOverheadBytes);$($_.Value.NextPartitionNumber);$($_.Value.ID76PartitionParent)"
        }
    }
    else {
        $Output += "RDBDetails;NOTAVAILABLE"
    }
  
    $Output += "MBR Partition Details:"
    $Output += "MBRPartitionHeader;Type;ImportedPartitionMethod;ImportedPartition;ImportedFilesSpaceBytes;VolumeName;StartingPositionBytes;PartitionSizeBytes;PartitionType;DefaultGPTMBRPartition;PartitionSubType;PartitionTypeGPTMBRorAmiga;ImportedPartitionPath;ImportedGPTMBRPartitionNumber;Name;ImportedFilesPath "
    $MBRPartitions = Get-AllGUIPartitions -PartitionType 'MBR' 
    if ($MBRPartitions){
        $MBRPartitions | ForEach-Object {
           $Output += "MBRPartitionDetails;$($_.value.ImportedPartitionMethod);$($_.value.ImportedPartition);$($_.value.ImportedFilesSpaceBytes);$($_.value.VolumeName);$($_.value.StartingPositionBytes);$($_.value.PartitionSizeBytes);$($_.value.PartitionType);$($_.value.DefaultGPTMBRPartition);$($_.value.PartitionSubType);$($_.value.PartitionTypeGPTMBRorAmiga);$($_.value.ImportedPartitionPath);$($_.value.ImportedGPTMBRPartitionNumber);$($_.value.Name);$($_.value.ImportedFilesPath)"           
        }
    }
    else {
        $Output += "MBRPartitionDetails;NOTAVAILABLE"
    }

    $Output += "RDB Partition Details:"
    $Output += "RDBPartitionHeader;Type;Name;ImportedPartitionMethod;ImportedPartition;ImportedFilesSpaceBytes;StartingPositionBytes;PartitionSizeBytes;PartitionType;DefaultAmigaWorkbenchPartition;PartitionTypeGPTMBRorAmiga;DefaultAmigaWorkPartition;ImportedPartitionPath;VolumeName;VolumeNameOriginalImportedValue;Bootable;BootableOriginalImportedValue;DosType;DosTypeOriginalImportedValue;NoMount;NoMountOriginalImportedValue;Priority;PriorityOriginalImportedValue;MaxTransfer;MaxTransferOriginalImportedValue;DeviceName;DeviceNameOriginalImportedValue;Buffers;BuffersOriginalImportedValue;Mask;MaskOriginalValue"    
    $RDBPartitions = Get-AllGUIPartitions -PartitionType 'Amiga' 
    if ($RDBPartitions){
        $RDBPartitions | ForEach-Object {
           $Output += "RDBPartitionDetails;$($_.Name);$($_.value.ImportedPartitionMethod);$($_.value.ImportedPartition);$($_.value.ImportedFilesSpaceBytes);$($_.value.StartingPositionBytes);$($_.value.PartitionSizeBytes);$($_.value.PartitionType);$($_.value.DefaultAmigaWorkbenchPartition);$($_.value.PartitionTypeGPTMBRorAmiga);$($_.value.DefaultAmigaWorkPartition);$($_.value.ImportedPartitionPath);$($_.value.VolumeName);$($_.value.VolumeNameOriginalImportedValue);$($_.value.Bootable);$($_.value.BootableOriginalImportedValue);$($_.value.DosType);$($_.value.DosTypeOriginalImportedValue);$($_.value.NoMount);$($_.value.NoMountOriginalImportedValue);$($_.value.Priority);$($_.value.PriorityOriginalImportedValue);$($_.value.MaxTransfer);$($_.value.MaxTransferOriginalImportedValue);$($_.value.DeviceName);$($_.value.DeviceNameOriginalImportedValue);$($_.value.Buffers);$($_.value.BuffersOriginalImportedValue);$($_.value.Mask);$($_.value.MaskOriginalImportedValue)"
               
        }
    }
    else {
        $Output += "RDBPartitionDetails;NOTAVAILABLE"
    } 
        
    $AvailablePackagesUserSelectedOutput = @()
    $HeaderRow = "AvailablePackagesUserSelectedHeader"
    
    If ($Script:GUIActions.AvailablePackages.Rows.Count -ne 0){
        $Fields = ($Script:GUIActions.AvailablePackages | Get-Member -MemberType Property).Name 
           
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
       
        $AvailablePackagesUserSelectedOutput += $HeaderRow 
        
        $Script:GUIActions.AvailablePackages | ForEach-Object {
            $DetailRow = "AvailablePackagesUserSelectedDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            $AvailablePackagesUserSelectedOutput += $DetailRow 
        }
        
        
    }
    else {
        $DetailRow = "AvailablePackagesUserSelectedDetails;NOTAVAILABLE"
      #  $AvailablePackagesUserSelectedOutput += $HeaderRow 
        $AvailablePackagesUserSelectedOutput += $DetailRow 
        
    }
    
    $Output += "AvailablePackagesUserSelected:"
    $Output += $AvailablePackagesUserSelectedOutput


    $FoundInstallMediatoUseOutput = @()

    $HeaderRow = "FoundInstallMediatoUseHeader"

    if ($Script:GUIActions.FoundInstallMediatoUse) {

        $Fields = ($Script:GUIActions.FoundInstallMediatoUse | Get-Member -MemberType NoteProperty).Name
           
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
        
        $FoundInstallMediatoUseOutput += $HeaderRow 
        
        $Script:GUIActions.FoundInstallMediatoUse | ForEach-Object {
            $DetailRow = "FoundInstallMediatoUseDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            
            $FoundInstallMediatoUseOutput += $DetailRow 
        
        }


    }
    else {
        $DetailRow = "FoundInstallMediatoUseDetails;NOTAVAILABLE"
        #$FoundInstallMediatoUseOutput += $HeaderRow 
        $FoundInstallMediatoUseOutput += $DetailRow
    }

    $Output += "Found InstallMedia:"
    $Output += $FoundInstallMediatoUseOutput 

    $FoundKickstarttoUseOutput = @()

    $HeaderRow = "FoundKickstarttoUseHeader"

    if ($Script:GUIActions.FoundKickstarttoUse) {
        $Fields = ($Script:GUIActions.FoundKickstarttoUse | Get-Member -MemberType NoteProperty).Name
        foreach ($Field in $Fields) {
            $HeaderRow +=  ";$field"
        }
        
        $FoundKickstarttoUseOutput += $HeaderRow

        $Script:GUIActions.FoundKickstarttoUse | ForEach-Object {
            $DetailRow = "FoundKickstarttoUseDetails"
            foreach ($Field in $Fields) {
                $DetailRow += ";$($_.$field)"
            }
            
            $FoundKickstarttoUseOutput += $DetailRow 
    
        }

    }
    else {
        $DetailRow = "FoundKickstarttoUseDetails;NOTAVAILABLE"
        #$FoundKickstarttoUseOutput += $HeaderRow
        $FoundKickstarttoUseOutput += $DetailRow 
    }
    
    $Output += "Found Kickstart:"
    $Output += $FoundKickstarttoUseOutput

    return $Output

}
