function Read-SettingsFile {
    param (
        $SettingsFile
    )
    
   # $SettingsFile = "C:\Users\Matt\Downloads\Test.e68"

    $ReadSettings = get-content -Path $SettingsFile

    if ($ReadSettings[1] -ne 'Do not edit this file! It will break Emu68 Imager! You have been warned!' -or $ReadSettings[0] -ne 'Version: 2.0.0'){
        return $false
    }
    else {

        $SettingsHeader = ('Type','Setting','Value')
        $MBRHeader = ('Type','MBRDisk','DiskSizeBytes','NumberofPartitionsID76','NextPartitionID76Number','NumberofPartitionsFAT32','NextPartitionFAT32Number')
        $RDBHeader = ('Type','AmigaDisk','NextPartitionNumber','ID76PartitionParent','NumberofPartitionsTotal')
        $MBRPartitionsHeader = ('Type','Partition','StartingPositionBytes','ImportedPartition','ImportedPartitionPath','VolumeName','PartitionType','ImportedFilesSpaceBytes','DefaultMBRPartition','ImportedFiles','PartitionSizeBytes','ImportedPartitionType','ImportedPartitionMethod','ImportedMBRPartitionNumber')
        $RDBPartitionsHeader = ('Type','Partition','StartingPositionBytes','ImportedPartition','ImportedPartitionPath','VolumeName','PartitionType','ImportedFilesSpaceBytes','DefaultAmigaWorkPartition','PartitionSizeBytes','ImportedPartitionType','DefaultAmigaWorkbenchPartition','ImportedPartitionMethod','Buffers','Bootable','DosType','DeviceName','MaxTransfer','NoMount','Priority','ImportedPartitionUpdatedValues')  
        $ImportFilesHeader = ('Type','Partition','FullPath','Size','CreationTime','Source','PathHeader')
      
        $Settings = @()
        $MBR = @()
        $RDB = @()
        $MBRPartitions = @()
        $RDBPartitions = @()
        $ImportFiles = @()
        
        for ($i = 1; $i -lt $ReadSettings.Count; $i++) {
            if (($ReadSettings[$i] -split ";")[0] -eq 'Setting'){
                $Settings += ConvertFrom-Csv -InputObject $ReadSettings[$i] -Delimiter ';' -Header $SettingsHeader 
            }
            elseif (($ReadSettings[$i] -split ";")[0] -eq 'MBR'){
                $MBR += ConvertFrom-Csv -InputObject $ReadSettings[$i] -Delimiter ';' -Header $MBRHeader

            }
            elseif (($ReadSettings[$i] -split ";")[0] -eq 'RDB'){
                $RDB += ConvertFrom-Csv -InputObject $ReadSettings[$i] -Delimiter ';' -Header $RDBHeader

            }
            elseif (($ReadSettings[$i] -split ";")[0] -eq 'MBRPartitionLayout'){
                $MBRPartitions += ConvertFrom-Csv -InputObject $ReadSettings[$i] -Delimiter ';' -Header $MBRPartitionsHeader
            }
            elseif (($ReadSettings[$i] -split ";")[0] -eq 'RDBPartitionLayout'){
                $RDBPartitions += ConvertFrom-Csv -InputObject $ReadSettings[$i] -Delimiter ';' -Header $RDBPartitionsHeader
            }
            elseif (($ReadSettings[$i] -split ";")[0] -eq 'RDBPartitionImportedFiles'){
                $ImportFiles += ConvertFrom-Csv -InputObject $ReadSettings[$i] -Delimiter ';' -Header $ImportFilesHeader 
            }
        }
       
        Remove-Variable -Name 'WPF_DP_Partition*'
        if (test-path variable:script:WPF_DP_Disk_MBR){
            Remove-Variable -Name 'WPF_DP_Disk_MBR'
        }

        $MBR | ForEach-Object {
            $_.DiskSizeBytes= [decimal]$_.DiskSizeBytes
        }


        $MBRPartitions | ForEach-Object {
            $_.StartingPositionBytes  = [decimal]$_.StartingPositionBytes  
            $_.PartitionSizeBytes = [decimal]$_.PartitionSizeBytes
            $_.ImportedFilesSpaceBytes = [decimal]$_.ImportedFilesSpaceBytes
        }

        $RDBPartitions | ForEach-Object {
            $_.StartingPositionBytes  = [decimal]$_.StartingPositionBytes  
            $_.PartitionSizeBytes = [decimal]$_.PartitionSizeBytes
            $_.ImportedFilesSpaceBytes = [decimal]$_.ImportedFilesSpaceBytes
        }

        $Settings | ForEach-Object {
            (Get-Variable -Scope Script -Name "GUIActions").Value.$($_.Setting) = $_.Value       
        }
        
        $WPF_Setup_ScreenMode_Dropdown.SelectedItem = $Script:GUIActions.ScreenModetoUseFriendlyName
        $WPF_Setup_KickstartVersion_Dropdown.SelectedItem = $Script:GUIActions.KickstartVersiontoUseFriendlyName
        
        Set-InitialDiskValues -SizeBytes $MBR.DiskSizeBytes -LoadSettings
        
        $WPF_DP_Disk_MBR.NumberofPartitionsFAT32 = $MBR.NumberofPartitionsFAT32
        $WPF_DP_Disk_MBR.NumberofPartitionsID76 = $MBR.NumberofPartitionsID76
        $WPF_DP_Disk_MBR.NextPartitionID76Number = $MBR.NextPartitionID76Number
        $WPF_DP_Disk_MBR.NextPartitionFAT32Number = $MBR.NextPartitionFAT32Number
       
        $MBRPartitions | ForEach-Object {
            if ($_.PartitionType -eq 'FAT32'){
                if ($_.DefaultMBRPartition -eq 'True'){
                    Add-GUIPartitiontoMBRDisk -LoadSettings -PartitionType 'FAT32' -NewPartitionNameFromSettings $_.Partition -AddType 'SpecificPosition' -DefaultPartition $true -SizeBytes ($($_.PartitionSizeBytes)) -VolumeName $_.VolumeName -StartingPositionBytes ($($_.StartingPositionBytes)) 
                }
                elseif ($_.ImportedPartition -eq 'True') {
                    Add-GUIPartitiontoMBRDisk -LoadSettings -PartitionType 'FAT32' -NewPartitionNameFromSettings $_.Partition -AddType 'SpecificPosition' -ImportedMBRPartitionNumber $_.ImportedMBRPartitionNumber -PathtoImportedPartition $_.ImportedPartitionPath -ImportedPartition $true -ImportedPartitionMethod $_.ImportedPartitionMethod -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes)) -VolumeName $_.VolumeName
                }
                else {
                    Add-GUIPartitiontoMBRDisk -LoadSettings -PartitionType 'FAT32' -NewPartitionNameFromSettings $_.Partition -AddType 'SpecificPosition' -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes)) -VolumeName $_.VolumeName
                } 
            }
            elseif ($_.PartitionType -eq 'ID76'){
                if ($_.DefaultMBRPartition -eq 'True'){
                    Add-GUIPartitiontoMBRDisk -LoadSettings -PartitionType 'ID76' -NewPartitionNameFromSettings $_.Partition -AddType 'SpecificPosition' -DefaultPartition $true -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes)) 
                }
                elseif ($_.ImportedPartition -eq 'True') {
                    Add-GUIPartitiontoMBRDisk -LoadSettings -PartitionType 'ID76' -NewPartitionNameFromSettings $_.Partition -AddType 'SpecificPosition' -ImportedMBRPartitionNumber $_.ImportedMBRPartitionNumber -PathtoImportedPartition $_.ImportedPartitionPath -ImportedPartition $true -ImportedPartitionMethod $_.ImportedPartitionMethod -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes))
                }
                else {
                    Add-GUIPartitiontoMBRDisk -LoadSettings -PartitionType 'ID76' -NewPartitionNameFromSettings $_.Partition -AddType 'SpecificPosition' -SizeBytes ($($_.PartitionSizeBytes)) -StartingPositionBytes ($($_.StartingPositionBytes))
                }
                Add-AmigaDisktoID76Partition -ID76PartitionName $_.Partition
                foreach ($AmigaDisk in $RDB) {
                    if ($Disk.AmigaDisk -eq "$($_.Partition)_AmigaDisk"){
                        (Get-Variable -name "$($_.Partition)_AmigaDisk").Value.NextPartitionNumber = $Disk.NextPartitionNumber
                        (Get-Variable -name "$($_.Partition)_AmigaDisk").Value.ID76PartitionParent = $Disk.ID76PartitionParent
                        (Get-Variable -name "$($_.Partition)_AmigaDisk").Value.NumberofPartitionsTotal = $Disk.NumberofPartitionsTotal
                        break
                    }
                } 
            }
            
        }
        
        $RDBPartitions | ForEach-Object {
            $AmigaDiskName = ($_.Partition.Substring(0,($_.Partition.IndexOf('_AmigaDisk_')+10)))
            if ($_.DefaultAmigaWorkbenchPartition -eq 'True'){
                Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Partition -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -PartitionTypeAmiga 'Workbench' -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.Type -MaxTransfer $MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority             

            }
            elseif ($_.DefaultAmigaWorkPartition -eq 'True'){
                Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Partition -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -PartitionTypeAmiga 'Work' -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.Type -MaxTransfer $MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority 
            }
            elseif ($_.ImportedPartition -eq 'True'){
                if ($_.ImportedPartitionType -eq 'Derived'){         
                    Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Partition -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -ImportedPartition $true -DerivedImportedPartition $true -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.Type -MaxTransfer $MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority
                }
                else {
                    Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Partition -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -ImportedPartition $true -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.Type -MaxTransfer $MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority
                }
            }
            else {
                Add-GUIPartitiontoAmigaDisk -LoadSettings -NewPartitionNameFromSettings $_.Partition -AmigaDiskName $AmigaDiskName -SizeBytes ($($_.PartitionSizeBytes)) -AddType 'AtEnd' -VolumeName $_.VolumeName -DeviceName $_.DeviceName -Buffers $_.Buffers -DosType $_.Type -MaxTransfer $MaxTransfer -Bootable $_.Bootable -NoMount $_.NoMount -Priority $_.Priority 
            } 
            (Get-variable -name $_.Partition).Value.ImportedPartitionUpdatedValues = $_.ImportedPartitionUpdatedValues
            foreach ($File in $ImportFiles) {
                if ($File.Partition -eq $_.Partition){
                    (Get-variable -name $_.Partition).Value.ImportedFiles+= [PSCustomObject]@{
                        FullPath = $File.FullPath
                        Size = $File.Size
                        CreationTime = $File.CreationTime
                        Source = $File.Source
                        PathHeader = $File.PathHeader
                    }
                }
            }
        }            

        return
    }
}
