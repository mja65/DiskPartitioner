function Write-SettingsFile {
    param (
        $SettingsFile
    )

    $Output = @()
    $Output += 'Do not edit this file! It will break Emu68 Imager! You have been warned!'
    $Output += "Setting;OutputPath;$($Script:GUIActions.OutputPath)"
    $Output += "Setting;ScreenModetoUse;$($Script:GUIActions.ScreenModetoUse)"
    $Output += "Setting;ScreenModetoUseFriendlyName;$($Script:GUIActions.ScreenModetoUseFriendlyName)"
    $Output += "Setting;SSID;$($Script:GUIActions.SSID)"
    $Output += "Setting;WifiPassword;$($Script:GUIActions.WifiPassword)"
    $Output += "Setting;ADFLocation;$($Script:GUIActions.ADFLocation)"
    $Output += "Setting;ROMLocation;$($Script:GUIActions.ROMLocation)"
    $Output += "Setting;KickstartVersiontoUse;$($Script:GUIActions.KickstartVersiontoUse)"
    $Output += "Setting;KickstartVersiontoUseFriendlyName;$($Script:GUIActions.KickstartVersiontoUseFriendlyName)" 
    $Output += "Setting;UseGlowIcons;$($Script:GUIActions.UseGlowIcons)"
    $Output += "Setting;IsDisclaimerAccepted;$($Script:GUIActions.IsDisclaimerAccepted)"
    $Output += "Setting;WorkbenchFilesNeeded;$($Script:GUIActions.WorkbenchFilesNeeded)" 
    $Output += "Setting;RomNeeded;$($Script:GUIActions.RomNeeded)" 
    $Output += "Setting;InstallADFPath;$($Script:GUIActions.InstallADFPath)" 
    $Output += "Setting;GlowIconsADFPath;$($Script:GUIActions.GlowIconsADFPath)" 

    $Output += "MBR;WPF_DP_Disk_MBR;$($WPF_DP_Disk_MBR.DiskSizeBytes);$($WPF_DP_Disk_MBR.NumberofPartitionsID76);$($WPF_DP_Disk_MBR.NextPartitionID76Number);$($WPF_DP_Disk_MBR.NumberofPartitionsFAT32);$($WPF_DP_Disk_MBR.NextPartitionFAT32Number)" 
    Get-Variable -name '*_AmigaDisk' | ForEach-Object{
        $Output += "RDB;$($_.Name);$($_.Value.NextPartitionNumber);$($_.Value.ID76PartitionParent);$($_.Value.NumberofPartitionsTotal)"
    }

    $MBRPartitions = Get-AllGUIPartitions -PartitionType 'MBR'
    foreach ($Partition in $MBRPartitions) {
        $Output += "MBRPartitionLayout;$($Partition.Name);$($Partition.Value.StartingPositionBytes);$($Partition.Value.ImportedPartition);$($Partition.Value.ImportedPartitionPath);$($Partition.Value.VolumeName);$($Partition.Value.PartitionType);$($Partition.Value.ImportedFilesSpaceBytes);$($Partition.Value.DefaultMBRPartition);$($Partition.Value.ImportedFiles);$($Partition.Value.PartitionSizeBytes);$($Partition.Value.ImportedPartitionType);$($Partition.Value.ImportedPartitionMethod);$($Partition.Value.ImportedMBRPartitionNumber)"   
    }
    
    $AmigaPartitions = Get-AllGUIPartitions -PartitionType 'Amiga'
    foreach ($Partition in $AmigaPartitions) {
        $Output += "RDBPartitionLayout;$($Partition.Name);$($Partition.Value.StartingPositionBytes);$($Partition.Value.ImportedPartition);$($Partition.Value.ImportedPartitionPath);$($Partition.Value.VolumeName);$($Partition.Value.PartitionType);$($Partition.Value.ImportedFilesSpaceBytes);$($Partition.Value.DefaultAmigaWorkPartition);$($Partition.Value.PartitionSizeBytes);$($Partition.Value.ImportedPartitionType);$($Partition.Value.DefaultAmigaWorkbenchPartition);$($Partition.Value.ImportedPartitionMethod);$($Partition.Value.Buffers);$($Partition.Value.Bootable);$($Partition.Value.DosType);$($Partition.Value.DeviceName);$($Partition.Value.MaxTransfer);$($Partition.Value.NoMount);$($Partition.Value.Priority);$($Partition.Value.ImportedPartitionUpdatedValues)"  
        if ($Partition.Value.ImportedFiles){
            foreach ($ImportedFile in $Partition.Value.ImportedFiles){
                $Output += "RDBPartitionImportedFiles;$($Partition.Name);$($ImportedFile.FullPath);$($ImportedFile.Size);$($ImportedFile.CreationTime);$($ImportedFile.Source);$($ImportedFile.PathHeader)"  
            }
        }
    }
    
    'Version: 2.0.0' | Out-File $SettingsFile
    $Output | ForEach-Object {
        $_ | Out-File $SettingsFile -Append
    }
}
